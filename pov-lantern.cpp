// pov-lantern
// 2018-12-02
// (c) Peter Csurgay 

#include <avr/pgmspace.h>

#include <Adafruit_NeoPixel.h>
//#ifdef __AVR__
//  #include <avr/power.h>
//#endif


const unsigned char nng[4][8][26+8] PROGMEM = {
{
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,5,0,0,0,0 },
  { 0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0, 0,0,5,5,5,0,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,0, 0,0,5,5,5,0,0,0  },
  { 0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,3,0,0,0,0  }
},
{
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,5,0,0,0,0  },
  { 0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0, 0,0,5,5,5,0,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,0, 0,0,5,5,5,0,0,0  },
  { 0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,3,0,0,0,0,0  }
},
{
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,5,0,0,0,0  },
  { 0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0, 0,0,5,5,5,0,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,0, 0,0,5,5,5,0,0,0  },
  { 0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,3,0,0,0,0  }
},
{
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,5,0,0,0,0  },
  { 0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0, 0,0,5,5,5,0,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,0, 0,0,5,5,5,0,0,0  },
  { 0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0, 0,5,5,5,5,5,0,0  },
  { 0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 5,5,5,5,5,5,5,0  },
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,3,0,0,0  }
}
};

const unsigned char pix[4][8][41] PROGMEM = {
{
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,2,0,0, 2,0,0,0,0, 0,0,2,0, 0,2,0,0  },
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0,0, 0,0,0,1, 1,0,0,0  },
  { 0,1,1,1, 1,1,1,1, 1,0,0,0, 0,1,1,0, 0,0,0,0, 0,1,0,0, 0,0,0,1, 1,2,0,1,0, 0,0,0,0, 1,1,2,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,0, 1,0,0,1, 1,0,0,0, 0,0,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },

  { 0,0,0,0, 1,1,1,1, 1,1,1,0, 0,0,0,1, 0,1,1,0, 0,1,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },
  { 0,0,1,0, 0,1,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 1,0,1,0, 0,0,1,0, 0,0,0,0,1, 0,0,0,1, 1,0,0,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,1, 0,0,1,0, 0,0,0,0,0, 1,1,0,1, 0,0,0,0  },
  { 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,1,0, 0,0,0,0,0, 0,0,1,0, 0,0,0,0  }
},
{
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,2,0,0, 2,0,0,0,0, 0,0,2,0, 0,2,0,0  },
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0,0, 0,0,0,1, 1,0,0,0  },
  { 0,1,1,1, 1,1,1,1, 1,0,0,0, 0,1,1,0, 0,0,0,0, 0,1,0,0, 0,0,0,1, 1,2,0,1,0, 0,0,0,0, 1,1,2,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,0, 1,0,0,1, 1,0,0,0, 0,0,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },

  { 0,0,0,0, 1,1,1,1, 1,1,1,0, 0,0,0,1, 0,1,1,0, 0,1,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },
  { 0,0,1,0, 0,1,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 1,0,1,0, 0,0,1,1, 0,0,0,0,1, 0,0,0,1, 0,0,0,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,1, 1,0,1,0, 0,0,0,0,0, 1,1,0,1, 0,0,0,0  },
  { 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0,0, 0,0,0,0, 1,0,0,0  }
},
{
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,2,0,0, 2,0,0,0,0, 0,0,2,0, 0,2,0,0  },
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0,0, 0,0,0,1, 1,0,0,0  },
  { 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,1, 1,2,0,0,1, 0,0,0,0, 1,1,2,0  },
  { 0,1,1,1, 1,1,1,1, 1,0,0,0, 0,1,1,0, 0,0,0,0, 0,0,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },

  { 0,0,0,1, 1,1,1,1, 1,1,1,0, 1,0,0,1, 1,0,0,0, 0,1,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },
  { 0,0,0,0, 1,1,1,1, 1,1,1,0, 0,0,0,1, 0,1,1,1, 1,0,1,0, 0,0,1,0, 0,0,0,0,1, 0,0,0,0, 1,0,0,0  },
  { 0,0,1,0, 0,1,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,1, 1,0,1,0, 0,0,0,0,1, 0,0,0,1, 0,0,0,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,1,0, 0,0,0,0, 0,0,0,0  }
},
{
  { 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,2,0,0, 2,0,0,0,0, 0,0,2,0, 0,2,0,0  },
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,1, 0,0,0,0,0, 0,0,0,1, 1,0,0,0  },
  { 0,0,2,2, 2,2,2,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,1, 1,2,0,1,0, 0,0,0,0, 1,1,2,0  },
  { 0,1,1,1, 1,1,1,1, 1,0,0,0, 0,1,1,0, 0,0,0,0, 0,0,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },

  { 0,0,0,1, 1,1,1,1, 1,1,1,0, 1,0,0,1, 1,0,0,0, 0,1,1,1, 1,1,1,1, 0,0,0,0,1, 1,1,1,1, 1,0,0,0  },
  { 0,0,0,0, 1,1,1,1, 1,1,1,0, 0,0,0,1, 0,1,1,1, 1,0,1,0, 0,0,0,1, 0,0,0,0,1, 0,0,0,1, 0,0,0,0  },
  { 0,0,1,0, 0,1,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,0, 0,0,1,0, 0,0,1,0, 0,0,0,0,0, 1,0,0,1, 0,0,0,0  },
  { 0,0,0,1, 1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0,0, 1,0,0,1, 0,0,0,0  }
}
};

#define TRIGGER        3
#define PIN            4
#define NUMPIXELS      8

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS,PIN,NEO_GRB + NEO_KHZ800);

void setup() {
  pinMode(TRIGGER,INPUT);
  pixels.begin();
  attachInterrupt(digitalPinToInterrupt(TRIGGER),paint,RISING);
}

const uint8_t palette[7][3] = {
  { 0,0,0 },		// 0 -Transparent
  { 0,0,255 },		// 1 - Blue
  { 255,0,0 },		// 2 - Red
  { 255,255,0 },		// 3 - Blue (Orange volt: 255,24,0)
  { 0,255,0 },	// 4 - Magenta
  { 255,0,0 },	// 5 - Dark magenta
  { 0,255,0 }		// 6 - Yellow
};

void loop() {
}

long co = 0;
int scene = 0;

void paint() {
	if (scene <2) {
		for (int i = 0; i<co; i++) delayMicroseconds(500);
		for (int i=0; i<41; i++) {
		  for (int j=0; j<8; j++) {
			unsigned char ind = pgm_read_byte_near(pix[co%4][j]+i);
			pixels.setPixelColor(7-j,pixels.Color(palette[ind][0],palette[ind][1],palette[ind][2]));
		  }
		  pixels.show();
		  delayMicroseconds(300);
		}
	}
	else {
    for (int i = 0; i<10; i++) delayMicroseconds(700);
		for (int i=0; i<26+8; i++) {
		  for (int j=0; j<8; j++) {
			unsigned char ind = pgm_read_byte_near(nng[co%4][j]+i);
			pixels.setPixelColor(7-j,pixels.Color(palette[ind][0],palette[ind][1],palette[ind][2]));
		  }
		  pixels.show();
		  delayMicroseconds(300);
		}
	}
    co = (co + 1) % 70; if (co==0) scene = (scene + 1) % 3;
}

